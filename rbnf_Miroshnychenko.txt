label_point = "Label", ";" ;
goto_label = "Goto", ident, ";" ;
program_name = ident;
value_type = "integer_4", ident, { "," , ident } ;
declaration_ident = ident;
other_declaration = ",", ident;
declaration = value_type, declaration_ident, { other_declaration } ;
operation_not = "!!" , inseparable_expression ;
and_action = "&&" , inseparable_expression ;
or_action = "||" , high_priority_expression ;
equal_action = "==" , middle_priority_expression ;
not_equal_action = "!=" , middle_priority_expression ;
less_or_equal_action = "<=" , middle_priority_expression ;
greater_or_equal_action = ">=" , middle_priority_expression ;
add_action = "+" , high_priority_expression ;
sub_action = "-" , high_priority_expression ;
mul_action = "*" , inseparable_expression ;
div_action = "/" , inseparable_expression ;
mod_action = "%" , inseparable_expression ;
unary_operation = operation_not ;
inseparable_expression = group_expression | unary_operation | ident_read | value_read;
high_priority_left_expression = group_expression | unary_operation | ident_read | value_read ;
high_priority_action = mul_action | div_action | mod_action | and_action ;
high_priority_expression = high_priority_left_expression , { high_priority_action } ;
middle_priority_left_expression = high_priority_expression | group_expression | unary_operation | ident_read | value_read ; 
middle_priority_action = add_action | sub_action | or_action;
middle_priority_expression = middle_priority_left_expression , { middle_priority_action } ;
low_priority_left_expression = middle_priority_expression | high_priority_expression | group_expression | unary_operation | ident_read | value_read ;
low_priority_action = less_or_equal_action | greater_or_equal_action | equal_action | not_equal_action ;
low_priority_expression = low_priority_left_expression , { low_priority_action } ;
group_expression = "(" , low_priority_expression , ")" ;
bind = ident_write , "==>", low_priority_expression  ;
if_expression = low_priority_expression ;
body_for_true = "then" , { statement } , ";" ;
body_for_false = "else" , { statement } , ";" ;
cycle_begin_expression = low_priority_expression;
cycle_counter = ident ;
cycle_counter_last_value = value ;
cycle_body = "do" , statement , { statement } ;
for_downto_cycle = "for" , cycle_counter , "=", cycle_counter_last_value , "downto" , cycle_begin_expression , cycle_body , ";" ;
while_cycle_head_expression = low_priority_expression ;
while_cycle = "while" , while_cycle_head_expression , { statement } , ";" ;
tokenCONTINUE = "continue" ;
tokenWHILE = "while" ;
tokenEXIT = "exit" ;
continue_while = tokenCONTINUE , tokenWHILE ;
exit_while = tokenEXIT , tokenWHILE ;
statement_in_while_body = statement | continue_while | exit_while ;
repeat_until_cycle_cond = low_priority_expression ;
repeat_until_cycle = "repeat" , { statement } , "until" , repeat_until_cycle_cond ;
input = "scan" , "(" , ident_write , ")" ;
output = "print", "(", low_priority_expression, ")";
statement = recursive_descent_end_point | bind | if_block | for_downto_cycle | while_cycle | repeat_until_cycle | label_point | goto_label | input | output;
program = "program" , program_name , ";" , "start" , { statement } , "finish" ;
digit = digit_0 | digit_1 | digit_2 | digit_3 | digit_4 | digit_5 | digit_6 | digit_7 | digit_8 | digit_9;
non_zero_digit = digit_1 | digit_2 | digit_3 | digit_4 | digit_5 | digit_6 | digit_7 | digit_8 | digit_9;
unsigned_value = (non_zero_digit , { digit } | "0") ;
value = [ sign ] , unsigned_value ;
letter_in_lower_case = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
letter_in_upper_case = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";
ident = letter_in_lower_case, { letter_in_lower_case } ;
